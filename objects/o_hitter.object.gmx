<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_hitter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create a hit for gameplay

finished = false;
depth = -y - 500;
moving_hit = instance_create(x + sprite_width, y + 1, o_hit);
CORRECT_ACC = x + 182;
CORRECT_POW = x + 51;

// Booleans for checking progress
first_pass = false;
second_pass = false;

// Hit array for hits placed
arr_hits = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move hit

// Move once to the left
if (moving_hit.x &gt; x + 11 &amp;&amp; !first_pass) {
    moving_hit.x -= 4;
    if (moving_hit.x &lt;= x + 11) {
        first_pass = true;
    }
} 
// Move once to the right
else if (moving_hit.x &lt; x + sprite_width &amp;&amp; !second_pass) {
    moving_hit.x += 4;
    if (moving_hit.x &gt;= x + sprite_width) {
        second_pass = true;
    }
}

// Remove moving_hit after 2 marks
if (array_length_1d(arr_hits) == 2) {
        moving_hit.visible = false;
        second_pass = true;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Parse hit placement

if (keyboard_check(ord('J')) &amp;&amp; array_length_1d(arr_hits) &lt; 2) {
    instance_create(moving_hit.x, moving_hit.y, o_hit);
    arr_hits[array_length_1d(arr_hits)] = moving_hit.x;
    io_clear();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for hits and add any remaining

if (second_pass) {
    while (array_length_1d(arr_hits) &lt; 2) {
        arr_hits[array_length_1d(arr_hits)] = moving_hit.x;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make hit on the ball

if (second_pass) {
    dist_offset = arr_hits[0] - (x + 51);
    var hit_dist = instance_find(o_xhair, 0).distance + dist_offset;
    
    acc_offset = arr_hits[1] - (x + 182);
    var hit_acc = instance_find(o_xhair, 0).angle + acc_offset;
    
    with (instance_find(o_ball, 0)) {
        sp = ((hit_dist / 2) / instance_find(o_xhair, 0).distance) * instance_find(o_xhair, 0).sp;
        motion_add(360 - hit_acc, sp);
    }
    
    with (instance_find(o_par_counter, 0)) {
        count++;
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish: Set up xhair for next hit

if (second_pass) {
    with(instance_find(o_xhair, 0)) {
    if (current_club == club.driver) {
        current_club = club.wedge;
    }
        current_state = state.marking;
        x = lastx;
        y = lasty;
        visible = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish: Destroy this instance once finished

if (second_pass) {
    // Destroy all hits
    with (o_hit) {
        instance_destroy();
    }
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
