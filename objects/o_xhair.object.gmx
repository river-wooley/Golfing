<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_xhair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The xhair motions the gameplay.

image_speed = 0.15;

// enumerated data type to motion a finite-state machine
enum state{marking, ready, hitting, flying};
current_state = state.marking;

// enumerated data type to 
enum club{driver, wedge, putter};
current_club = club.putter;

// Rotational angle around player for aiming.
angle = 270;

// Distance of the club.
distance = MAX_DISTANCE;

// Speed of the club.
sp = MAX_SPEED;

// Last position to move camera
lastx = x;
lasty = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update lastx and lasty at the beginning

if (current_state == state.marking) {
    lastx = x;
    lasty = y;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth

depth = -y - 500;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Club Data

if (current_club == club.driver) {
    distance = MAX_DISTANCE;
    sp = MAX_SPEED;
} else if (current_club == club.wedge) {
    distance = MAX_DISTANCE / 3;
    sp = MAX_SPEED / 1.8;
} else if (current_club == club.putter) {
    distance = 70;
    sp = 20;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increment and decrement states

if (keyboard_check(ord('J')) &amp;&amp; current_state &lt; state.hitting) {
    current_state++;
    io_clear();
}

if (keyboard_check(ord('K')) &amp;&amp; current_state &lt; state.hitting &amp;&amp; current_state &gt; state.marking) {
    current_state--;
    io_clear();
    
    // Check if xhair needs to be moved back
    if (current_state == state.marking) {
        x = lastx;
        y = lasty;
        o_xhair.visible = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State: Marking

if (current_state == state.marking) {
    if (keyboard_check(ord('A')) || keyboard_check(vk_left)) {
        angle--;
        
        // Handle loop-around
        if (angle == -1) {
            angle = 359;
        }
        angle = angle mod 360;
    }
    if (keyboard_check(ord('D')) || keyboard_check(vk_right)) {
        angle++;
        angle = angle mod 360;
    }
    
    // Only increment if above minimum
    if (current_club &gt; club.driver &amp;&amp; (keyboard_check(ord('W')) || keyboard_check(vk_up))) {
        current_club--;
        io_clear();
    }
    if (current_club &lt; club.putter &amp;&amp; (keyboard_check(ord('S')) || keyboard_check(vk_down))) {
        current_club++;
        io_clear();
    }

    x = o_ball.x + (distance * cos(degtorad(angle)));
    y = o_ball.y + (distance * sin(degtorad(angle)));
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State: Ready

if (current_state == state.ready) {
    o_xhair.x = o_ball.x;
    o_xhair.y = o_ball.y;
    o_xhair.visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State: Hitting

// Spawn hitter to hit the ball
if(current_state == state.hitting &amp;&amp; !instance_exists(o_hitter)) {
    instance_create(view_xview[0] + 30, view_yview[0] + 200, o_hitter);
    visible = false;
} else if (current_state == state.hitting) {
    visible = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State: Flying

ball = instance_find(o_ball, 0);

if (ball.speed &gt; 0) {
    x = ball.x;
    y = ball.y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw line

ball = instance_find(o_ball, 0);
draw_self();
draw_set_colour(c_dkgray);
draw_line_width(ball.x, ball.y, x, y, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
